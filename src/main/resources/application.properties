## JPA settings
## https://www.geeksforgeeks.org/spring-boot-jparepository-with-example/
## --------------------------------------------------------------------------

# we want to see the hibernate SQL stmts in the output
spring.jpa.show-sql=true
# create/upadte schema with the given datasource
spring.jpa.hibernate.ddl-auto=create
# define the dialect ot use for the specific datasource implementation
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# H2 Database
spring.h2.console.enabled=true
## a named/custom datasource was defined
## this need to be introduced to spring by implementing a configuration with @EnableJpaRepositories
## @see myappDataSourceConfiguration
myapp.datasouce.driverClassName=org.h2.Driver
myapp.datasource.username=sa
myapp.datasource.password=
#myapp.datasource.jdbcurl=jdbc:h2:file:/tmp/myappdb.db;
myapp.datasource.url=jdbc:h2:mem:myappdb;

## by default the datasource is managed by spring-boot
## to configure the spring.datasource properties can be used
## https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties.data

# spring.datasource.url=jdbc:h2:mem:dcbapp
# spring.datasource.driverClassName=org.h2.Driver
# spring.datasource.username=sa
# spring.datasource.password=password

## Server settings
## --------------------------------------------------------------------------

# change the port to use for the embedded web-server
# the default value is 8080
#server.port=8080


## Template settings
## --------------------------------------------------------------------------

# in this example thymeleaf is used for templating
# other variants are also possible
# @see https://www.baeldung.com/spring-template-engines#4-thymeleaf-in-spring-boot

spring.thymeleaf.cache=false
